/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2306                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

scale 1; // convertToMeters 1;

vertices
(
    // z at 0:
        // Reservoir Mid
        (    0.00    0.00    0.00 )   // id:  0
        (    4.50    0.00    0.00 )   // id:  1
        (    4.50    0.25    0.00 )   // id:  2
        (    0.00    0.25    0.00 )   // id:  3
        // Reservoir Low
        (    0.00   -0.50    0.00 )   // id:  4
        (    4.50   -0.50    0.00 )   // id:  5
        // Reservoir Top
        (    0.00    1.00    0.00 )   // id:  6
        (    4.50    1.00    0.00 )   // id:  7

        // inlet
        (   -1.00    0.00    0.00 )   // id:  8
        (   -1.00    0.25    0.00 )   // id:  9
        // outlet
        (    5.50    0.00    0.00 )   // id:  10
        (    5.50    0.25    0.00 )   // id:  11

    // z at 0.5:
        // Reservoir Mid
        (    0.00    0.00    0.50 )   // id:  12
        (    4.50    0.00    0.50 )   // id:  13
        (    4.50    0.25    0.50 )   // id:  14
        (    0.00    0.25    0.50 )   // id:  15
        // Reservoir Low
        (    0.00   -0.50    0.50 )   // id:  16
        (    4.50   -0.50    0.50 )   // id:  17
        // Reservoir Top
        (    0.00    1.00    0.50 )   // id:  18
        (    4.50    1.00    0.50 )   // id:  19

        // inlet
        (   -1.00    0.00    0.50 )   // id:  20
        (   -1.00    0.25    0.50 )   // id:  21
        // outlet
        (    5.50    0.00    0.50 )   // id:  22
        (    5.50    0.25    0.50 )   // id:  23

    //   Extra Vertices coincident to some previous vertices, but mandatory to create blocks
    // with different slicing numbers 
    // z at 0: 
        // Reservoir Low Extra
        (    0.00    0.00    0.00 )   // id:  24 == 0
        (    4.50    0.00    0.00 )   // id:  25 == 1

    // z at 1:
        // Reservoir Low Extra
        (    0.00    0.00    0.50 )   // id:  26 == 12
        (    4.50    0.00    0.50 )   // id:  27 == 13

);

// Mesh Refinements User Input Controls

    // X - Direction slicings
    NXI  25; // Number of cell in the x direction of the inflow Channel
    NXR  50; // Number of cell in the x direction of the Reservoir Section
    NXO  25; // Number of cell in the x direction of the outflow Channel
    // Y - Direction slicings
    NYT  30; // Number of cell in the y direction of the Top Reservoir
    NYM   9; // Number of cell in the y direction of the Middle Reservoir
    NYL  20; // Number of cell in the y direction of the Lower Reservoir
    // Z - Direction slicings
    Nz   10; // Z direction Channel depth

blocks
(       // hex (       Vertices indices to create a block       ) (  slicing the block  ) simpleGrading ( expansiton Ratio factor )
    // Block Down
        hex ( 0  1  2  3      12 13 14 15 ) ( $NXR $NYM $Nz ) simpleGrading ( 1 1 1 ) // block id: 0 - Reservoir Mid
        // hex ( 4  5  1  0      16 17 13 12 ) ( $NXR $NYL $Nz ) simpleGrading ( 1 1 1 ) // block id: 1 - Reservoir Low // Old
        hex ( 4  5 25 24      16 17 27 26 ) (  250 $NYL $Nz ) simpleGrading ( 1 1 1 ) // block id: 1 - Reservoir Low // New
        hex ( 3  2  7  6      15 14 19 18 ) ( $NXR $NYT $Nz ) simpleGrading ( 1 1 1 ) // block id: 2 - Reservoir Top
        hex ( 8  0  3  9      20 12 15 21 ) ( $NXI $NYM $Nz ) simpleGrading ( 1 1 1 ) // block id: 3 - inlet channel
        hex ( 1 10 11  2      13 22 23 14 ) ( $NXO $NYM $Nz ) simpleGrading ( 1 1 1 ) // block id: 4 - outlet channel

);

edges
(

);

boundary
(
    inlet
    {
        type patch;
        faces
        (
            ( 9  8 20 21)
        );
    }
    outlet
    {
        type patch;
        faces
        (
            (10 11 23 22)
        );
    }
    atmosphere
    {
        type patch;
        faces
        (
            // Front
                // Reservoir Mid
                (12 13 14 15)
                // Reservoir Low
                // (16 17 13 12) // old
                (16 17 27 26) // new
                // Reservoir Top
                (15 14 19 18)
                // Inflow channel 
                (20 12 15 21)
                // Outflow Channel
                (13 22 23 14)
        );
    }
    walls
    {
        type wall;
        faces
        (
            // Back plane wall
                // Reservoir Mid
                ( 0  3  2  1 ) 
                // Reservoir Low
                // ( 4  0  1  5 ) // old
                ( 4 24 25  5 ) // new
                // Reservoir Top
                ( 3  7  6  2 )
                // Inlet Channel
                ( 8  9  3  0 )
                // Outlet Channel
                ( 1  2 11 10 )

            // Region: Reservoir Low
                // Backward-Facing Step at Inflow channel 
                // ( 0  4 16 12) // old 
                (24  4 16 26) // new
                // Parallel Facing Reservoir Low Wall Face
                ( 4  5 17 16) 
                // Forward-Facing Step at Outflow Channel
                // ( 5  1 13 17) // old 
                ( 5 25 27 17) // new

            // Region: Reservoir Top
                // Backward-Facing Step at Inflow Channel
                ( 6  3 15 18) 
                // Parallel Facing Reservoir Low Wall Face
                ( 7  6 18 19) 
                // Forward-Facing Step at Outflow Channel
                ( 2  7 19 14) 
                
            // Inflow channel walls
                ( 8  0 12 20) 
                ( 3  9 21 15)

            // Outflow channel walls
                ( 1 10 22 13)
                (11  2 14 23)
        );
    }
    surfaceToWeldBlock0
    {
        type patch;
        faces
        (
            ( 0  1 13 12)
        );
    }
    surfaceToWeldBlock1
    {
        type patch;
        faces
        (
            (24 25 27 26)
        );
    }
);

mergePatchPairs
(
    (surfaceToWeldBlock0 surfaceToWeldBlock1)
);

// ************************************************************************* //
